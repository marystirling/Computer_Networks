// Author: Aniruddha Gokhale, Vanderbilt University
// Created: Sept 2021 for Distributed Systems course
// Modified: Fall 2022 for Computer Networking course
//
// IDL schema for the data type we will be transferring

// For our assignment, we will be defining some application-level
// message formats, just like HTTP has GET, PUT, POST etc. 
//
// We have to define a namespace under which this schema gets
// translated to the programming language we are using.
// Let us call it CustomAppProto

namespace proto.grocery_proto;

// define the user-defined type that we want to serialize
// This can be arbitrarily complex. Here we show a sample
// which is not overly complex but still showcases the features
//
// In your case this structure will be whatever is the data structure
// that holds the information that the producer will send to consumer

// The data structure is defined using the keyword table as shown. The
// variable name  is my choice.  Individual fields of the data structure
// use the form <variable name: data type>. Note, this can be nested, and
// there could be multiple such data structures defined.

enum MilkType: int{
  one_percent = 0,
  two_percent = 1,
  fat_free = 2,
  whole = 3,
  almond = 4,
  cashew = 5,
  oat = 6
}

enum BreadType: int{
  whole_wheat = 0,
  white = 1,
  pumpernickel =2,
  rye = 3,
  sourdough = 4
}

enum MeatType: int{
  ground_beef = 0,
  turkey = 1,
  ham = 2,
  chicken = 3,
  steak = 4
}

struct Milk_Order
{
    type: MilkType;
    quantity: float;
}

struct Bread_Order
{
    type: BreadType;
    quantity: float;
}


struct Meat_Order
{
    type: MeatType;
    quantity: float;
}


struct Veggies
{
    tomato: float;
    cucumber: float;
    carrot: float;
    corn: float;
}

struct Cans
{
    coke: int;
    beer: int;
    rootbeer: int;
}


struct Bottles
{
    sprite: int;
    gingerale: int;
    lemonade: int;
}

struct Drinks
{
    cans: Cans;
    bottles: Bottles;
}







table Contents
{
    veggies: Veggies;
    drinks: Drinks;
    milk: [Milk_Order];
    bread: [Bread_Order];
    meat: [Meat_Order];
}

table Grocery_Order
{
    contents: Contents;
}

// indicate what is the top level structure from where the serialization starts.
// The reason we need this is because we may have a very complicated nested
// data structure and so we need to tell the compiler the starting point.

root_type Grocery_Order;
