// Author: Aniruddha Gokhale, Vanderbilt University
// Created: Sept 2021
// Modified: Fall 2022 (some restructuring and zmq inclusion)
//

Purpose of this sample code is to show how to use Flatbuffers for serialization.
Essentially, using flatbuf, we can convert arbitrarily complex data types between
native and serialized formats. When something is serialized, it becomes a byte stream
which is what we then transmit via the "send" command in the client code..

Files in this directory:
-----------------------

schema.fbs
        defines the schema for the user-defined type that we want to serialize

flatbufdemo_local.py
        Driver programs to showcase the flatbuffer-based serialization. No network
        is involved here. All we show here is how to invoke the flatbuf's generated
        code to serialize from native to serialized format and vice versa. We
        just dump the contents before and after to make sure things before and after
        are exactly the same.
        
flatbufdemo_zmq.py
        Similar to the local version except that we now send the serialized packet
        via ZMQ socket and unserialize it on the receiving end. Here the sender and
        receiver are on the same machine but communicate via ZMQ sockets.
        
serialize.py
        uses the generated flatbuffer logic to serialize and deserialize data.

CustomAppProto
        A directory along with Flatbuf-based code for serialization that is
        generated by the flatbuf compiler called flatc.

-----------------------------
Package installation
-----------------------------
We will need the Flatbuffer package available from

           https://google.github.io/flatbuffers/

by doing

           git clone https://github.com/google/flatbuffers.git

You will have to build the package from the source as described here:

           https://google.github.io/flatbuffers/flatbuffers_guide_building.html

Since we will be building it for our Ubuntu VM, use the Unix Makefiles option to cmake.
You will also need to install cmake, if you do not already have it. cmake can be
installed via the normal approach of "sudo apt install cmake". Once you have cloned
the flatbuffers project, do the following:

    cd flatbuffers
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release

This will generate the makefiles, after which you build the binaries by issuing
the command

     make

This will create the flatbuffers compiler for us called "flatc"

If you want to install it in system wide folders so that the compiler is available on your
PATH, then do this after building the compiler above.

      sudo make install

which will install the compiler in /usr/local/bin and will be accessible from your PATH env

There is also a Python package for flatbuffers that can be installed via pip but
I have not tried that.

----------------------------------------------------
Invoking the Compiler on our Schema
----------------------------------------------------

Before we can attempt any serialization, we will need to convert our schema to the
code that our programming language can understand. To that end we use the
"flatc" compiler from Flatbuffer.  The Flatbuffer schema compiler and its options
are defined here:

       https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html
       
We will use the compiler to generate the code that we will use for our program needs.
It needs to be invoked only once unless you change the schema in which case you run
it again.  So, do the following in your Ubuntu VM. Since we are using Python, we tell
flatc to generate Python code.

For now, the sample code already has this schema transformed to Python code for us.
So you don't need to do this.

The command we have used is:

    flatc --python schema.fbs

This generates a directory corresponding to the namespace defined in the
schema file. The actual logic is generated inside this directory.

Running the Code
-------------------------

The rest of the code is run in the following manner:
(1) Open a shell in your Ubuntu VM
(2) Invoke "python3 flatbufdemo_local.py"
OR
(2) Invoke "python3 flatbufdemo_zmq.py"

To find out the command line parameters accepted by this program, type
python3 flatbufdemo_local.py -h or python3 flatbufdemo_zmq.py -h



